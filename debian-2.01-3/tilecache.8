.TH tilecache 8 "2007-12-27" "2.01" "GIS Utilities"
.SH NAME
tilecache \- Cache and serve map tiles

.SH DESCRIPTION
TileCache is a BSD licensed tile caching mechanism.  The goal is to make it
easy to set up a WMS or TMS frontend to any backend data services you might be
interested in, using a pluggable caching and rendering mechanism.

TileCache was developed by MetaCarta Labs and released to the public under a
BSD license.

The TileCache was designed as a companion to OpenLayers, the BSD licensed web
mapping interface. If you are using TileCache with OpenLayers, please read the
section of this readme which describes how to do so. For additional help with
setting up TileCache for use with OpenLayers, please feel free to stop by
#openlayers, on irc.freenode.net, or to send email to
tilecache@openlayers.org.


.SH RUNNING UNDER CGI

.TP 2
\(bu
TileCache should have a cgi installed under /usr/lib/cgi-bin, called
tilecache.cgi.  This is accessible from
http://yourmachine.example.com/cgi-bin/tilecache.cgi. 

.TP 2
\(bu
Edit /etc/tilecache.cfg to point the DiskCache to the location you wish to
cache tiles, and the layers to point to the map file or WMS server you wish to
cache.

.TP 2
\(bu
Visit:

.nf
http://yourmachine.example.com/cgi-bin/tilecache.cgi?LAYERS=basic&SERVICE=WMS&BBOX=\-180,\-90,0,90
.fi

.TP 2
\(bu
Or visit:

.nf
http://yourmachine.example.com/cgi-bin/tilecache.cgi/1.0.0/basic/0/0/0.png
.fi

.TP 2
\(bu
If you see a tile, TileCache is working correctly.


.SH RUNNING UNDER MOD_PYTHON

.TP 2
\(bu
Edit /etc/tilecache.cfg to point the DiskCache to the location you wish to
cache tiles, and the layers to point to the map file or WMS server you wish to
cache.


.TP 2
\(bu
Add the following to your Apache configuration:

.nf
Alias /tiles /var/lib/python-support/python2.4/tilecache/
<Directory /var/lib/python-support/python2.4/>
     SetHandler python-program
     PythonHandler TileCache.Service
     PythonOption TileCacheConfig /etc/tilecache.cfg
</Directory>
.fi


.TP 2
\(bu
Visit one of the URLs described above, replacing tilecache.cgi with
tilecache.py


.TP 2
\(bu
If you see a tile you have set up your configuration correctly. Congrats!


.SH RUNNING STANDALONE (UNDER WSGI)
TileCache includes standalone HTTP server which uses the WSGI handler. This
implementation depends on 
.I Python Paste
, which can be installed via the python-paste package.


.\" depart_block_quote
For versions of Python earlier than 2.5, you will also need to install
wsgiref:


.\" visit_block_quote
http://cheeseshop.python.org/pypi/wsgiref


.\" depart_block_quote
Once you have all the prerequisites installed, simply run:


.\" visit_block_quote

.nf
/usr/sbin/tilecache_http_server
.fi

.\" depart_block_quote
This will start a webserver listening on port 8080 (by default), after which
you should be able to open:


.\" visit_block_quote

.nf
http://yourmachine.example.com:8080/1.0.0/basic/0/0/0.png
.fi

.\" depart_block_quote
to see your first tile.


.SH RUNNING UNDER FASTCGI
TileCache includes a fastcgi implementation. In order to use this
implementation, you will need to install flup, available from:


.\" visit_block_quote
http://trac.saddi.com/flup


.\" depart_block_quote
This implementation also depends on Python Paste, which can be downloaded
via the python-paste package:

.\" depart_block_quote
Once you have done this, you can configure your fastcgi server to use
tilecache.fcgi.

Configuring FastCGI is beyond the scope of this documentation.

.\" depart_block_quote

.SH CONFIGURATION
TileCache is configured by a config file, defaulting to tilecache.cfg.
There are several parameters to control TileCache layers that are applicable
to all layers:


.\" visit_block_quote

.TP
.B bbox
The bounding box of the Layer. The resolutions array defaults
to having resolutions which are equal to the bbox divided by
512 (two standard tiles).


.TP
.B debug
Whether to send debug output to the error.log. Defaults to "yes",
can be set to "no"


.TP
.B description
Layer description, used in some metadata responses. Default
is blank.


.TP
.B extension
File extension of the layer. Used to request images from
WMS servers, as well as when writing cache files.


.TP
.B layers
A string used to describe the layers. Typically passed directly
to the renderer. The WMSLayer sends this in the HTTP request,
and the MapServerLayer chooses which layer to render based on
this string. If no layer is provided, the layer name is used
to fill this property.


.TP
.B levels
An integer, describing the number of \'zoom levels\' or
scales to support. Overridden by resolutions, if passed.


.TP
.B mapfile
The absolute file location of a mapfile. Required for
MapServer and Mapnik layers.


.TP
.B maxResolution
The maximum resolution. If this is set, a resolutions
array is automatically calculated up to a number of
levels controlled by the \'levels\' option.


.TP
.B metaTile
set to "yes" to turn on metaTiling. This will request larger
tiles, and split them up using the Python Imaging library.
Defaults to "no".


.TP
.B metaBuffer
an integer number of pixels to request around the outside
of the rendered tile. This is good to combat edge effects
in various map renderers. Defaults to 10.


.TP
.B metaSize
A comma seperated pair of integers, which is used to
determine how many tiles should be rendered when using
metaTiling. Default is 5,5.


.TP
.B resolutions
Comma seperate list of resolutions you want the TileCache
instance to support.


.TP
.B size
Comma seperated set of integers, describing the width/height
of the tiles. Defaults to 256,256


.TP
.B srs
String describing the SRS value. Default is "EPSG:4326"


.TP
.B type
The type of layer. Options are: WMSLayer, MapnikLayer, MapServerLayer,
ImageLayer


.TP
.B url
URL to use when requesting images from a remote WMS server. Required
for WMSLayer.


.TP
.B watermarkImage
The watermarkImage parameter is assigned on a per\-layer basis.
This is a fully qualified path to an image you would like to apply to each
tile. We recommend you use a watermark image the same size as your tiles.
If using the default tile size, you should use a 256x256 image.
NOTE: Python Imaging Library DOES NOT support interlaced images.


.TP
.B watermarkOpacity
The watermarkOpacity parameter is assigned on a per\-layer basis.
This configures the opacity of the watermark over the tile, it is a floating
point number between 0 and 1. Usage is optional and will otherwise default.


.TP
.B extent_type
Setting this to \'loose\' will allow TileCache to generate tiles outside the
maximum bounding box. Useful for clients that don\'t know when to stop
asking for tiles.


.TP
.B tms_type
Setting this to "google" will cause tiles to switch vertical order (that
is, following the Google style x/y pattern).


.\" depart_block_quote

.SH USING TILECACHE WITH OPENLAYERS
To run OpenLayers with TileCache the URL passed to the OpenLayers.Layer.WMS
constructor must point to the TileCache script, i.e. tilecache.cgi or
tilecache.py. As an example see the example-cgi.html file included in the
TileCache distribution, under /usr/share/doc/tilecache/examples/.

Note: example-cgi.html assumes TileCache is set up under CGI (see above). If
you set up TileCache under mod_python you\'d need to slighly modify
example-cgi.html: the URL passed to the OpenLayers.Layer.WMS constructor must
point to the mod_python script as opposed to the CGI script. Similarly, you
would need to edit this URL if you were to use TileCache with the standalone
HTTP Server or FastCGI.

The most important thing to do is to ensure that the OpenLayers Layer
has the same resolutions and bounding box as your TileCache layer. You can define
the resolutions in OpenLayers via the \'resolutions\' option or the \'maxResolution\'
option on the layer. The maxExtent should be defined to match the bbox parameter
of the TileCache layer.


.SH USING TILECACHE WITH MAPSERVER
MapServer has a map level metadata option, labelcache_map_edge_buffer, which
is set automatically by TileCache to the metaBuffer plus five when metaTiling
is on, if it is not set in the mapfile.

If you are using MetaTiling, be aware that MapServer generates interlaced
PNG files, which PIL will not read. See
http://mapserver.gis.umn.edu/docs/faq/pil_mapscript on how to resolve this.


.SH SEEDING YOUR TILECACHE
The tilecache_seed utility will seed tiles in a cache automatically. You will
need to have TileCache set up in one of the previously described configurations.


.SS Usage

.\" visit_block_quote
/usr/sbin/tilecache_seed <url> <layer> [<zoom start> <zoom stop> [<bbox>]]


.\" depart_block_quote

.SS Arguments

.\" visit_block_quote

.TP
.B url
http://example.com/yourdir/tilecache.cgi? or
http://example.com/yourdir/tilecache.py


.TP
.B layer
same layer name that is in the tilecache.cfg


.TP
.B zoom start
Zoom level to start the process


.TP
.B zoom end
Zoom level to end the process


.TP
.B bbox
The bounding box to seed



.SS Seeding by center point and radius
If called without zoom level arguments, tilecache_seed.py will assume
that it needs to read a list of points and radii from standard input,
in the form:



.nf
<lat>,<lon>,<radius>
<lat>,<lon>,<radius>
<lat>,<lon>,<radius>
<lat>,<lon>,<radius>
<ctrl + d>
.fi

The format of this file is:



.TP
.B lon
the position(s) to seed longitude


.TP
.B lat
the position(s) to seed latitude


.TP
.B radius
the radius around the lon/lat to seed in degrees



.SS Examples
An example with zoom levels 5 through 12 would be like;



.nf
$ /usr/sbin/tilecache_seed "http://example.com/yourdir/tilecache.cgi?" Zip_Codes 5 12 "\-118.12500,31.952162238,\-116.015625,34.3071438563"
.fi

The bbox can be dropped and defaults to world lonlat(\-180,\-90,180,90):



.nf
$ /usr/sbin/tilecache_seed.py "http://example.com/yourdir/tilecache.cgi?" Zip_Codes 0 9
.fi

In center point/radius mode, the zoom level range is not specifiable from the
command\-line. An example usage might look like:



.nf
$ /usr/sbin/tilecache_seed.py "http://example.com/yourdir/tilecache.cgi?" Zip_Codes
\-118.12500,31.952162238,0.05
\-121.46327,32.345345645,0.08
<Ctrl+D>
.fi

... the seeding will then commence ...


.SH CLEANING YOUR TILECACHE
The tilecache_clean utility will remove the least recently accessed
tiles from a cache, down to a specified size.

.SS Usage

/usr/sbin/tilecache_clean [options] <cache_location>

.SS Options


.TP
.B \-\-version
show program\'s version number and exit

.TP
.B \-h , \-\-help
show this help message and exit

.TP
.BI \-s\  SIZE ,\ \-\-size\  SIZE
Maximum cache size, in megabytes.

.TP
.BI \-e\  ENTRIES ,\ \-\-entries\  ENTRIES
Maximum cache entries. This limits the
amount of memory that will be used to store
information about tiles to remove.


.SS Notes
The \-\-entries option to tilecache_clean.py is optional, and is used to regulate
how much memory it uses to do its bookkeeping. The default value of 1 million
will hopefully keep RAM utilization under about 100M on a 32\-bit x86 Linux
machine. If tilecache_clean.py doesn\'t appear to be keeping your disk cache
down to an appropriate size, try upping this value.

tilecache_clean is designed to be run from a cronjob like so:


.nf
00 05 * * *  /usr/sbin/tilecache_clean.py \-s500 /var/www/tilecache
.fi

.SH TROUBLESHOOTING
Occasionally, for some reason, when using meta tiles, your server may leave
behind lock files. If this happens, there will be files in your cache directory
with the extension \'.lck\'. If you are seeing tiles not render and taking
multiple minutes before returning a 500 error, you may be suffering under
a stuck lock.

Removing all files with extension \'.lck\' from the cache directory will
resolve this problem.


.SH SEE ALSO
memcached(8)

http://tilecache.org/

http://openlayers.org/

http://wiki.osgeo.org/index.php/WMS_Tiling_Client_Recommendation

http://wiki.osgeo.org/index.php/Tile_Map_Service_Specification


.SH AUTHOR
crschmidt@metacarta.com

.SH COPYRIGHT
(c) 2006-2007 MetaCarta, Inc.
Distributed under the BSD license.

